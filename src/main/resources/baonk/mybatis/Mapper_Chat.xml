<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.nv.baonk.chat.dao.ChatMapper">
	<resultMap type="ChatUserVO" id="chatUserVO">
		<result property="userId"         column="user_id"      />
		<result property="image"          column="image"        />
		<result property="userName"       column="user_name"    />
		<result property="active"         column="active"       />
		<result property="unreadCnt"      column="unread_cnt"   />
	</resultMap>
	
	<resultMap type="ChatMessageVO" id="chatMessageVO">
		<result property="messageId"      column="message_id"   />
		<result property="clusterId"      column="cluster_id"   />
		<result property="content"        column="content"      />
		<result property="fileName"       column="file_name"    />
		<result property="filePath"       column="file_path"    />
		<result property="senderId"       column="sender_id"    />
		<result property="senderName"     column="sender_name"  />
		<result property="receiverId"     column="receiver_id"  />
		<result property="receiverType"   column="receiver_type"/>
		<result property="createdTime"    column="created_time" />
		<result property="userImage"      column="user_image"   />
		<result property="tenantId"       column="tenant_id"    />
		<result property="contType"       column="cont_type"    />
		<result property="messageType"    column="message_type" />
	</resultMap>
	
	<select id="getChatUserList" resultMap="chatUserVO">
		select
			u.userid as user_id,
			u.image  as image,
			u.name   as user_name,
			u.active as active,
			(
			case when (select last_message from conversation where user_id = #{userId} and related_id = u.userid and tenant_id = #{tenantId}) is null then (select count(*) from chatmessage where sender_id = u.userid and receiver_id = #{userId} and tenant_id = #{tenantId})
				else(
							select
								count(*)
							from
								chatmessage
							where
								(cast(message_id as int) > cast((select last_message as last_message from conversation where user_id = #{userId} and related_id = u.userid and tenant_id = #{tenantId}) as int))
							and
								(sender_id = u.userid and receiver_id = #{userId})
							and
								tenant_id = #{tenantId}
					)
				end
			)
			as unread_cnt
		from
			chatusers f join user u on (u.userid = f.friendId and f.userId = #{userId}) and u.tenantid = f.tenantId
						left join conversation c on (c.user_id = f.userId and c.related_id = f.friendId) and c.tenant_id = f.tenantId
		where
			u.tenantid = #{tenantId}
		order by
			c.lastChated desc,
			u.name asc
<!-- 		limit
			#{startPoint}, #{blockSize} -->
	</select>
	
	<select id="getAllGroupChat" resultMap="chatUserVO">
		select
			m.group_id     as user_id,
			g.avatar       as image,
			g.name         as user_name,
			g.group_status as active,
			(
				case when (select last_message from conversation where user_id = #{userId} and related_id = m.group_id and tenant_id = #{tenantId}) is null then (select count(*) from chatmessage where receiver_id = m.group_id and tenant_id = #{tenantId})
					else (
								select
									count(*)
								from
									chatmessage
								where
									(cast(message_id as int) > cast((select last_message as last_message from conversation where user_id = #{userId} and related_id = m.group_id and tenant_id = #{tenantId}) as int))
								and
									receiver_id = m.group_id
								and
									tenant_id = #{tenantId}
							)
					end
			)
			as unread_cnt
		from
			groupchat g join groupchatmember m on (g.id = m.group_id and g.tenant_id = m.tenant_id)
		where
				(m.member_id = #{userId} and m.member_type = 'user')
			or
				(m.member_id = #{deptId} and m.member_type = 'dept')
			and 
				m.tenant_id = #{tenantId}
		order by
			g.lastChated desc,
			g.name asc
	</select>
	
	<select id="getChatUserListCnt" resultType="Integer">
		select
			count(*)
		from
			chatusers f join user u on (u.userid = f.friendId and f.userId = #{userId}) and u.tenantid = f.tenantId
		where
			u.tenantid = #{tenantId}
	</select>
	
	<select id="getAllChatUsers" resultMap="chatUserVO">
		select
			u.userid as user_id,
			u.image  as image,
			u.name   as user_name,
			u.active as active,
			(
			case when (select last_message from conversation where user_id = #{userId} and related_id = u.userid and tenant_id = #{tenantId}) is null then (select count(*) from chatmessage where sender_id = u.userid and receiver_id = #{userId} and tenant_id = #{tenantId})
				else(
							select
								count(*)
							from
								chatmessage
							where
								(cast(message_id as int) > cast((select last_message as last_message from conversation where user_id = #{userId} and related_id = u.userid and tenant_id = #{tenantId}) as int))
							and
								(sender_id = u.userid and receiver_id = #{userId})
							and
								tenant_id = #{tenantId}
					)
				end
			)
			as unread_cnt
		from
			user u left join conversation c on (u.userid = c.related_id and c.user_id = #{userId}) and u.userid = c.tenant_id
		where
			u.tenantid = #{tenantId}
		and
			u.userid  != #{userId}
		order by
			c.lastChated DESC,
			u.name ASC
		<!-- limit
			#{startPoint}, #{blockSize} -->
	</select>
	
	<select id="getAllChatUsersCnt" resultType="Integer">
		select
			count(*)
		from
			user u
		where
			u.tenantid = #{tenantId}
		and
			u.userid  != #{userId}
	</select>
	
	<select id="getPersonalMessages" resultMap="chatMessageVO">
		select
			*
		from
			chatmessage
		where
			(
					(sender_id = #{senderId}   and receiver_id = #{receiverId})
				or 
					(sender_id = #{receiverId} and receiver_id = #{senderId})
			)
		and
			receiver_type = 1
		and
			tenant_id     = #{tenantId}
		order by
			cast(message_id as int) desc
		limit
			0, #{endPoint}
	</select>
	
	<select id="getMaxMessageId" resultType="String">
		select
			ifnull(max(convert(message_id, unsigned integer)), -1) as maxno
		from
			chatmessage
		where
			tenant_id = #{tenantId}
	</select>
	
	<insert id="saveMessage" parameterType="ChatMessageVO">
		insert into chatmessage (
			message_id,    tenant_id,     message_type,      cluster_id,        receiver_id,      receiver_type,     sender_id,
			content,       cont_type,     file_name,         file_path,         created_time,     user_image,        sender_name
		)
		values (
			#{messageId},  #{tenantId},   #{messageType},    #{clusterId},      #{receiverId},    #{receiverType},   #{senderId},
			#{content},    #{contType},   #{fileName},       #{filePath},       #{createdTime},   #{userImage},      #{senderName}
		)
	</insert>
	
	<insert id="insertLastMessage" parameterType="ConversationVO">
		insert into conversation (
			user_id,     related_id,      last_message,      lastChated,       tenant_id
		)
		values (
			#{userId},   #{relatedId},    #{lastMessage},    #{lastChated},    #{tenantId}
		)
		on duplicate key update
			last_message = #{lastMessage},
			lastChated   = #{lastChated}
	</insert>
	
</mapper>