<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.nv.baonk.chat.dao.ChatMapper">
	<resultMap type="ChatUserVO" id="chatUserVO">
		<result property="userId"         column="user_id"  />
		<result property="image"          column="image"    />
		<result property="userName"       column="user_name"/>
		<result property="active"         column="active"   />
	</resultMap>
	
	<resultMap type="ChatMessageVO" id="chatMessageVO">
		<result property="messageId"      column="message_id"   />
		<result property="clusterId"      column="cluster_id"   />
		<result property="content"        column="content"      />
		<result property="fileName"       column="file_name"    />
		<result property="filePath"       column="file_path"    />
		<result property="senderId"       column="sender_id"    />
		<result property="senderName"     column="sender_name"  />
		<result property="receiverId"     column="receiver_id"  />
		<result property="receiverType"   column="receiver_type"/>
		<result property="createdTime"    column="created_time" />
		<result property="userImage"      column="user_image"   />
		<result property="tenantId"       column="tenant_id"    />
		<result property="contType"       column="cont_type"    />
		<result property="messageType"    column="message_type" />
	</resultMap>
	
	<select id="getChatUserList" resultMap="chatUserVO">
		select
			(case when f.userId = u.userid then f.userId else f.friendId end) as user_id,
			u.image  as image,
			u.name   as user_name,
			u.active as active
		from
			friends f left join  user u on 
											(
												(u.userid = f.userId and f.friendId = #{userId}) 
											or
												(u.userid = f.friendId and f.userId = #{userId})
											)
										and u.tenantid = f.tenantId
		where
			u.tenantid = #{tenantId}
		order by
			u.name ASC
		limit
			#{startPoint}, #{blockSize}
	</select>
	
	<select id="getChatUserListCnt" resultType="Integer">
		select
			count(*)
		from
			friends f left join  user u on 
											(
												(u.userid = f.userId and f.friendId = #{userId}) 
											or
												(u.userid = f.friendId and f.userId = #{userId})
											)
										and u.tenantid = f.tenantId
		where
			u.tenantid = #{tenantId}
	</select>
	
	<select id="getAllChatUsers" resultMap="chatUserVO">
		select
			u.userid as user_id,
			u.image  as image,
			u.name   as user_name,
			u.active as active
		from
			user u
		where
			u.tenantid = #{tenantId}
		and
			u.userid  != #{userId}
		order by
			u.name ASC
		limit
			#{startPoint}, #{blockSize}
	</select>
	
	<select id="getAllChatUsersCnt" resultType="Integer">
		select
			count(*)
		from
			user u
		where
			u.tenantid = #{tenantId}
		and
			u.userid  != #{userId}
	</select>
	
	<select id="getPersonalMessages" resultMap="chatMessageVO">
		select
			*
		from
			chatmessage
		where
			(
					(sender_id = #{senderId}   and receiver_id = #{receiverId})
				or 
					(sender_id = #{receiverId} and receiver_id = #{senderId})
			)
		and
			receiver_type = 1
		and
			tenant_id     = #{tenantId}
		order by
			cast(message_id as int) desc
		limit
			0, #{endPoint}
	</select>
	
	<select id="getMaxMessageId" resultType="String">
		select
			ifnull(max(convert(message_id, unsigned integer)), -1) as maxno
		from
			chatmessage
		where
			tenant_id = #{tenantId}
	</select>
	
	<insert id="saveMessage" parameterType="ChatMessageVO">
		insert into chatmessage (
			message_id,    tenant_id,     message_type,      cluster_id,        receiver_id,      receiver_type,     sender_id,
			content,       cont_type,     file_name,         file_path,         created_time,     user_image,        sender_name
		)
		values (
			#{messageId},  #{tenantId},   #{messageType},    #{clusterId},      #{receiverId},    #{receiverType},   #{senderId},
			#{content},    #{contType},   #{fileName},       #{filePath},       #{createdTime},   #{userImage},      #{senderName}
		)
	</insert>
	
</mapper>